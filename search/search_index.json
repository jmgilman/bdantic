{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction The bdantic Python package provides an interface between Beancount and Pydantic . It accomplishes this by providing models which can be parsed directly from native Beancount types. In addition to this, all models can be exported back into their native Beancount types for full compatibility. Installation pip install bdantic Usage Parsing A handful of functions are provided for parsing Beancount types, but the primary method supports parsing most core types: import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = bdantic . parse ( amt ) # Produces a bdantic.models.Amount Alternatively, you can call the parse method on the model directly: from bdantic.models import Amount from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = Amount . parse ( amt ) Exporting All models can be directly exported back to their native Beancount types by using their bult-in export method: amt_export = model . export () assert amt == amt_export Ingesting Functions are available for parsing common responses from interacting with the Beancount package. You can parse an entire Beancount file with the following: import bdantic from beancount import loader # A bdantic.models.BeancountFile instance bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) print ( len ( bfile . entries )) You can also parse the response from executing a query: import bdantic from beancount import loader from beancount.query import query entries , _ , options = loader . load_file ( \"ledger.beancount\" ) query = \"SELECT date, narration, account, position\" result = query . run_query ( entries , options , query ) parsed_result = bdantic . parse_query ( result ) Or the result of running a realization: import bdantic from beancount.core import realization entries , _ , options = loader . load_file ( \"ledger.beancount\" ) real = realization . realize ( entries ) parsed_real = bdantic . parse ( real ) Rendering Perhaps the most powerful usage of bdantic is rendering beancount data into a more universal format like JSON. Since all models inherit from Pydantic they include full support for rendering their contents as JSON: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) js = bfile . json () print ( js ) # Look ma, my beancount data in JSON! The rendered JSON can be parsed back into the Beancount model that generated it: from bdantic.models import BeancountFile bfile = BeancountFile . parse_raw ( js ) In additiona to JSON, the directive models can be rendered as valid Beancount syntax using the built-in syntax method: from bdantic.models import Amount , Posting , Transaction from datetime import date from decimal import Decimal txn = Transaction ( date = date . today (), meta = {}, flag = \"*\" , payee = \"Home Depot\" , narration = \"Tools n stuff\" , tags = None , links = None , postings = [ Posting ( account = \"Assets:Bank:Cash\" , units = Amount ( number = Decimal ( - 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), Posting ( account = \"Expenses:HomeDepot\" , units = Amount ( number = Decimal ( 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), ], ) print ( txn . syntax ()) Advanced For more documentation, see the navigation sections to the left.","title":"Home"},{"location":"#introduction","text":"The bdantic Python package provides an interface between Beancount and Pydantic . It accomplishes this by providing models which can be parsed directly from native Beancount types. In addition to this, all models can be exported back into their native Beancount types for full compatibility.","title":"Introduction"},{"location":"#installation","text":"pip install bdantic","title":"Installation"},{"location":"#usage","text":"","title":"Usage"},{"location":"#parsing","text":"A handful of functions are provided for parsing Beancount types, but the primary method supports parsing most core types: import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = bdantic . parse ( amt ) # Produces a bdantic.models.Amount Alternatively, you can call the parse method on the model directly: from bdantic.models import Amount from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = Amount . parse ( amt )","title":"Parsing"},{"location":"#exporting","text":"All models can be directly exported back to their native Beancount types by using their bult-in export method: amt_export = model . export () assert amt == amt_export","title":"Exporting"},{"location":"#ingesting","text":"Functions are available for parsing common responses from interacting with the Beancount package. You can parse an entire Beancount file with the following: import bdantic from beancount import loader # A bdantic.models.BeancountFile instance bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) print ( len ( bfile . entries )) You can also parse the response from executing a query: import bdantic from beancount import loader from beancount.query import query entries , _ , options = loader . load_file ( \"ledger.beancount\" ) query = \"SELECT date, narration, account, position\" result = query . run_query ( entries , options , query ) parsed_result = bdantic . parse_query ( result ) Or the result of running a realization: import bdantic from beancount.core import realization entries , _ , options = loader . load_file ( \"ledger.beancount\" ) real = realization . realize ( entries ) parsed_real = bdantic . parse ( real )","title":"Ingesting"},{"location":"#rendering","text":"Perhaps the most powerful usage of bdantic is rendering beancount data into a more universal format like JSON. Since all models inherit from Pydantic they include full support for rendering their contents as JSON: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) js = bfile . json () print ( js ) # Look ma, my beancount data in JSON! The rendered JSON can be parsed back into the Beancount model that generated it: from bdantic.models import BeancountFile bfile = BeancountFile . parse_raw ( js ) In additiona to JSON, the directive models can be rendered as valid Beancount syntax using the built-in syntax method: from bdantic.models import Amount , Posting , Transaction from datetime import date from decimal import Decimal txn = Transaction ( date = date . today (), meta = {}, flag = \"*\" , payee = \"Home Depot\" , narration = \"Tools n stuff\" , tags = None , links = None , postings = [ Posting ( account = \"Assets:Bank:Cash\" , units = Amount ( number = Decimal ( - 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), Posting ( account = \"Expenses:HomeDepot\" , units = Amount ( number = Decimal ( 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), ], ) print ( txn . syntax ())","title":"Rendering"},{"location":"#advanced","text":"For more documentation, see the navigation sections to the left.","title":"Advanced"},{"location":"exporting/","text":"Exporting Overview All models (with the exception of the Account model) contain an export method which will produce the equivalent Beancount type from the model. It's essentially reversing what the parse method does: import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) parsed_amt = bdantic . parse ( amt ) exported_amt = parsed_amt . export () assert amt == exported_amt The model doesn't need to necessarily be derived from a beancount type in order for it to be exported. This is a useful feature because it allows creating Beancount types which are protected by the power of Pydantic validation models: from bdantic import models from decimal import Decimal # ValidationError: value is not a valid decimal (type=type_error.decimal) amt = models . Amount ( number = False , currency = \"USD\" ) . export () Helper Functions In addition to the above method, an export function is provided for exporting the given model. To export a list of models, use the export_all function.","title":"Exporting"},{"location":"exporting/#exporting","text":"","title":"Exporting"},{"location":"exporting/#overview","text":"All models (with the exception of the Account model) contain an export method which will produce the equivalent Beancount type from the model. It's essentially reversing what the parse method does: import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) parsed_amt = bdantic . parse ( amt ) exported_amt = parsed_amt . export () assert amt == exported_amt The model doesn't need to necessarily be derived from a beancount type in order for it to be exported. This is a useful feature because it allows creating Beancount types which are protected by the power of Pydantic validation models: from bdantic import models from decimal import Decimal # ValidationError: value is not a valid decimal (type=type_error.decimal) amt = models . Amount ( number = False , currency = \"USD\" ) . export ()","title":"Overview"},{"location":"exporting/#helper-functions","text":"In addition to the above method, an export function is provided for exporting the given model. To export a list of models, use the export_all function.","title":"Helper Functions"},{"location":"filtering/","text":"Filtering Overview All models support mutation using JMESPath expressions. Select The select method allows selecting subsets of data from within a model: from beancount import loader from bdantic import parse_loader entries , errors , options = loader . load_file ( \"ledger.beancount\" ) result = parse_loader ( entries , errors , options ) print ( result . entries [ 0 ] . select ( \"postings[].units\" )) The result is dependent on the selection expression and will be in the form of one or more nested dictionaries/lists. In other words, the original models will be in dict form, however, they can be converted back like so: from bdantic.models import Amount amounts = result . entries [ 0 ] . select ( \"postings[].units\" ) amounts = [ Amount . parse_obj ( a ) for a in amounts ] Filter For models which wraps lists, the filter method can be used for filtering the list down: from beancount import loader from bdantic import parse_loader entries , errors , options = loader . load_file ( \"ledger.beancount\" ) result = parse_loader ( entries , errors , options ) txns = result . entries . filter ( \"[?ty == 'Transaction']\" ) Unlike the select method, filtering will attempt to preserve the formats of models. This is important to note because if the expression mutates the models in such a way that validation fails then an exception will be raised.","title":"Filtering"},{"location":"filtering/#filtering","text":"","title":"Filtering"},{"location":"filtering/#overview","text":"All models support mutation using JMESPath expressions.","title":"Overview"},{"location":"filtering/#select","text":"The select method allows selecting subsets of data from within a model: from beancount import loader from bdantic import parse_loader entries , errors , options = loader . load_file ( \"ledger.beancount\" ) result = parse_loader ( entries , errors , options ) print ( result . entries [ 0 ] . select ( \"postings[].units\" )) The result is dependent on the selection expression and will be in the form of one or more nested dictionaries/lists. In other words, the original models will be in dict form, however, they can be converted back like so: from bdantic.models import Amount amounts = result . entries [ 0 ] . select ( \"postings[].units\" ) amounts = [ Amount . parse_obj ( a ) for a in amounts ]","title":"Select"},{"location":"filtering/#filter","text":"For models which wraps lists, the filter method can be used for filtering the list down: from beancount import loader from bdantic import parse_loader entries , errors , options = loader . load_file ( \"ledger.beancount\" ) result = parse_loader ( entries , errors , options ) txns = result . entries . filter ( \"[?ty == 'Transaction']\" ) Unlike the select method, filtering will attempt to preserve the formats of models. This is important to note because if the expression mutates the models in such a way that validation fails then an exception will be raised.","title":"Filter"},{"location":"models/","text":"Models base Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries. Base ( BaseModel , Generic ) pydantic-model The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) json ( self , * , include = None , exclude = None , by_alias = True , skip_defaults = None , exclude_unset = False , exclude_defaults = False , exclude_none = True , encoder = None , models_as_dict = True , ** dumps_kwargs ) Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) select ( self , expr , model = None ) Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None BaseDict ( Base , Generic ) pydantic-model A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values () BaseFiltered ( Base ) pydantic-model A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None filter ( self , expr ) Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None BaseList ( BaseFiltered , Generic ) pydantic-model A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v filter_dict ( meta ) Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta is_named_tuple ( obj ) Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) ) recursive_export ( b ) Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result recursive_parse ( b ) Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result data Provides models for the core beancount data types. Amount ( Base ) pydantic-model A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ] Cost ( Base ) pydantic-model A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ] CostSpec ( Base ) pydantic-model A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ] Inventory ( BaseList ) pydantic-model A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) Position ( Base ) pydantic-model A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ] directives Provides models for all beancount directives. Balance ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ] BaseDirective ( Base ) pydantic-model A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) syntax ( self ) Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) Close ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account Commodity ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str Custom ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ] Document ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ] Event ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str Meta ( BaseModel ) pydantic-model Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow Note ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str Open ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ] Pad ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account Posting ( Base ) pydantic-model A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]] Price ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount Query ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str Transaction ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ] TxnPosting ( Base ) pydantic-model A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting display Provides models for constructing a DisplayContext. CurrencyContext ( Base ) pydantic-model A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx export ( self ) Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx parse ( obj ) classmethod Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) DisplayContext ( Base ) pydantic-model A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx export ( self ) Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx parse ( obj ) classmethod Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) Distribution ( Base ) pydantic-model A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist export ( self ) Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist parse ( obj ) classmethod Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) file Provides models for representing the contents of a parsed beancount file. BeancountFile ( Base ) pydantic-model A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) export ( self ) Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) parse ( obj ) classmethod Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) Directives ( BaseList ) pydantic-model A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs export ( self ) Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs parse ( obj ) classmethod Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) Options ( BaseDict ) pydantic-model A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d export ( self ) Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d parse ( obj ) classmethod Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) query Provides models for representing the results of running a query. QueryColumn ( BaseModel ) pydantic-model A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str QueryResult ( Base ) pydantic-model A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) export ( self ) Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) parse ( obj ) classmethod Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) realize Provides models for representing the results of running a realization. Account ( BaseModel ) pydantic-model A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError from_real ( ra ) staticmethod Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) parse ( obj ) staticmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) RealAccount ( Base ) pydantic-model A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) export ( self ) Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra parse ( obj ) classmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) to_account ( self ) Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) TxnPostings ( BaseList ) pydantic-model A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] export ( self ) Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"Models"},{"location":"models/#models","text":"","title":"Models"},{"location":"models/#bdantic.models.base","text":"Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries.","title":"base"},{"location":"models/#bdantic.models.base.Base","text":"The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn )","title":"Base"},{"location":"models/#bdantic.models.base.Base.export","text":"Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self ))","title":"export()"},{"location":"models/#bdantic.models.base.Base.json","text":"Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , )","title":"json()"},{"location":"models/#bdantic.models.base.Base.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj ))","title":"parse()"},{"location":"models/#bdantic.models.base.Base.select","text":"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None","title":"select()"},{"location":"models/#bdantic.models.base.BaseDict","text":"A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values ()","title":"BaseDict"},{"location":"models/#bdantic.models.base.BaseFiltered","text":"A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"BaseFiltered"},{"location":"models/#bdantic.models.base.BaseFiltered.filter","text":"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"filter()"},{"location":"models/#bdantic.models.base.BaseList","text":"A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v","title":"BaseList"},{"location":"models/#bdantic.models.base.filter_dict","text":"Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta","title":"filter_dict()"},{"location":"models/#bdantic.models.base.is_named_tuple","text":"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) )","title":"is_named_tuple()"},{"location":"models/#bdantic.models.base.recursive_export","text":"Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result","title":"recursive_export()"},{"location":"models/#bdantic.models.base.recursive_parse","text":"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result","title":"recursive_parse()"},{"location":"models/#bdantic.models.data","text":"Provides models for the core beancount data types.","title":"data"},{"location":"models/#bdantic.models.data.Amount","text":"A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ]","title":"Amount"},{"location":"models/#bdantic.models.data.Cost","text":"A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ]","title":"Cost"},{"location":"models/#bdantic.models.data.CostSpec","text":"A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ]","title":"CostSpec"},{"location":"models/#bdantic.models.data.Inventory","text":"A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"Inventory"},{"location":"models/#bdantic.models.data.Inventory.export","text":"Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"export()"},{"location":"models/#bdantic.models.data.Inventory.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions )","title":"parse()"},{"location":"models/#bdantic.models.data.Position","text":"A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ]","title":"Position"},{"location":"models/#bdantic.models.directives","text":"Provides models for all beancount directives.","title":"directives"},{"location":"models/#bdantic.models.directives.Balance","text":"A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ]","title":"Balance"},{"location":"models/#bdantic.models.directives.BaseDirective","text":"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"BaseDirective"},{"location":"models/#bdantic.models.directives.BaseDirective.syntax","text":"Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"syntax()"},{"location":"models/#bdantic.models.directives.Close","text":"A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account","title":"Close"},{"location":"models/#bdantic.models.directives.Commodity","text":"A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str","title":"Commodity"},{"location":"models/#bdantic.models.directives.Custom","text":"A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ]","title":"Custom"},{"location":"models/#bdantic.models.directives.Document","text":"A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ]","title":"Document"},{"location":"models/#bdantic.models.directives.Event","text":"A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str","title":"Event"},{"location":"models/#bdantic.models.directives.Meta","text":"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow","title":"Meta"},{"location":"models/#bdantic.models.directives.Note","text":"A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str","title":"Note"},{"location":"models/#bdantic.models.directives.Open","text":"A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ]","title":"Open"},{"location":"models/#bdantic.models.directives.Pad","text":"A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account","title":"Pad"},{"location":"models/#bdantic.models.directives.Posting","text":"A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]]","title":"Posting"},{"location":"models/#bdantic.models.directives.Price","text":"A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount","title":"Price"},{"location":"models/#bdantic.models.directives.Query","text":"A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str","title":"Query"},{"location":"models/#bdantic.models.directives.Transaction","text":"A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ]","title":"Transaction"},{"location":"models/#bdantic.models.directives.TxnPosting","text":"A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting","title":"TxnPosting"},{"location":"models/#bdantic.models.display","text":"Provides models for constructing a DisplayContext.","title":"display"},{"location":"models/#bdantic.models.display.CurrencyContext","text":"A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"CurrencyContext"},{"location":"models/#bdantic.models.display.CurrencyContext.export","text":"Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"export()"},{"location":"models/#bdantic.models.display.CurrencyContext.parse","text":"Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), )","title":"parse()"},{"location":"models/#bdantic.models.display.DisplayContext","text":"A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"DisplayContext"},{"location":"models/#bdantic.models.display.DisplayContext.export","text":"Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"export()"},{"location":"models/#bdantic.models.display.DisplayContext.parse","text":"Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas )","title":"parse()"},{"location":"models/#bdantic.models.display.Distribution","text":"A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"Distribution"},{"location":"models/#bdantic.models.display.Distribution.export","text":"Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"export()"},{"location":"models/#bdantic.models.display.Distribution.parse","text":"Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist )","title":"parse()"},{"location":"models/#bdantic.models.file","text":"Provides models for representing the contents of a parsed beancount file.","title":"file"},{"location":"models/#bdantic.models.file.BeancountFile","text":"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"BeancountFile"},{"location":"models/#bdantic.models.file.BeancountFile.export","text":"Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"export()"},{"location":"models/#bdantic.models.file.BeancountFile.parse","text":"Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], )","title":"parse()"},{"location":"models/#bdantic.models.file.Directives","text":"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"Directives"},{"location":"models/#bdantic.models.file.Directives.export","text":"Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"export()"},{"location":"models/#bdantic.models.file.Directives.parse","text":"Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs )","title":"parse()"},{"location":"models/#bdantic.models.file.Options","text":"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"Options"},{"location":"models/#bdantic.models.file.Options.export","text":"Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"export()"},{"location":"models/#bdantic.models.file.Options.parse","text":"Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d )","title":"parse()"},{"location":"models/#bdantic.models.query","text":"Provides models for representing the results of running a query.","title":"query"},{"location":"models/#bdantic.models.query.QueryColumn","text":"A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str","title":"QueryColumn"},{"location":"models/#bdantic.models.query.QueryResult","text":"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"QueryResult"},{"location":"models/#bdantic.models.query.QueryResult.export","text":"Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"export()"},{"location":"models/#bdantic.models.query.QueryResult.parse","text":"Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows )","title":"parse()"},{"location":"models/#bdantic.models.realize","text":"Provides models for representing the results of running a realization.","title":"realize"},{"location":"models/#bdantic.models.realize.Account","text":"A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError","title":"Account"},{"location":"models/#bdantic.models.realize.Account.from_real","text":"Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , )","title":"from_real()"},{"location":"models/#bdantic.models.realize.Account.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , )","title":"parse()"},{"location":"models/#bdantic.models.realize.RealAccount","text":"A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"RealAccount"},{"location":"models/#bdantic.models.realize.RealAccount.export","text":"Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra","title":"export()"},{"location":"models/#bdantic.models.realize.RealAccount.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore )","title":"parse()"},{"location":"models/#bdantic.models.realize.RealAccount.to_account","text":"Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"to_account()"},{"location":"models/#bdantic.models.realize.TxnPostings","text":"A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"TxnPostings"},{"location":"models/#bdantic.models.realize.TxnPostings.export","text":"Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"export()"},{"location":"models/#bdantic.models.realize.TxnPostings.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"parse()"},{"location":"parsing/","text":"Parsing Overview Parsing is the main method by which Beancount types can be converted in their respective Pydantic models. Every model provided by bdantic includes a parse method which is responsible for parsing its associated Beancount type into a new instance of the model. import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = bdantic . parse ( amt ) # Produces a bdantic.models.Amount In most cases, the model will match the native beancount type field-for-field. In some cases the underlying Beancount data combines multiple types, like the realization.RealAccount class which is both a dictionary of child accounts as well as a container for individual account information. In cases like these the model may differ slightly (i.e. the RealAccount model uses a children field for holding child accounts), however, models will always convert back to their native Beancount types without issue. When a Beancount type contains child elements which can be represented as a model the parse method will recursively convert child elements to models as well. For example, parsing a Transaction will also parse all child postings as well as all child amounts of those postings. Not every Beancount type has an equivalent model. To see the currently suported types, refer to the type signature of the parse function. Parsing Beancount Types Parsing Files The parse_loader function provides a convenient interface for parsing the results of the beancount.loader functions. For example, one can convert all entries loaded from a Beancount file to their respective models like so: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) The BeancountFile model provides access to the parsed entries, errors, and options returned by the loader. Parsing Query Results The parse_query function provides an interface for parsing the results of running a Beancount query: import bdantic from beancount import loader from beancount.query import query entries , _ , options = loader . load_file ( \"ledger.beancount\" ) query = \"SELECT date, narration, account, position\" result = query . run_query ( entries , options , query ) parsed_result = bdantic . parse_query ( result ) The QueryResult returned contains the column and row data with all Beancount types automatically parsed into models. Parsing Realizations The realization.realize Beancount function takes a list of entries and uses them to calculate data about the accounts included in those entries. It returns a realization.RealAccount which is a dict like object that contains the entire account hierarchy. This object can be parsed: import bdantic from beancount.core import realization entries , _ , options = loader . load_file ( \"ledger.beancount\" ) real = realization . realize ( entries ) parsed_real = bdantic . parse ( real ) An additional Account model is provided and can be obtained by parsing it directly from a realization.RealAccount or calling the to_account method on a RealAccount . This model offers a simplified view of a single account and is thus easier to render. Internal Internally, parsing is accomplished by abusing the fact that most objects have a __dict__ property and all NamedTuple objects have a _asdict() method. Since Beancount makes heavy use of NamedTuple objects this fact is used by the recursive_parse function to recursively create a dictionary representation of any complex Beancount type. Pydantic models have a parse_obj method which takes in a dictionary and performs validation, producing a model if all validation checks pass. The nested dictionary produced is fed into this method to create the models.","title":"Parsing"},{"location":"parsing/#parsing","text":"","title":"Parsing"},{"location":"parsing/#overview","text":"Parsing is the main method by which Beancount types can be converted in their respective Pydantic models. Every model provided by bdantic includes a parse method which is responsible for parsing its associated Beancount type into a new instance of the model. import bdantic from beancount.core import amount from decimal import Decimal amt = amount . Amount ( number = Decimal ( 1.50 ), currency = \"USD\" )) model = bdantic . parse ( amt ) # Produces a bdantic.models.Amount In most cases, the model will match the native beancount type field-for-field. In some cases the underlying Beancount data combines multiple types, like the realization.RealAccount class which is both a dictionary of child accounts as well as a container for individual account information. In cases like these the model may differ slightly (i.e. the RealAccount model uses a children field for holding child accounts), however, models will always convert back to their native Beancount types without issue. When a Beancount type contains child elements which can be represented as a model the parse method will recursively convert child elements to models as well. For example, parsing a Transaction will also parse all child postings as well as all child amounts of those postings. Not every Beancount type has an equivalent model. To see the currently suported types, refer to the type signature of the parse function.","title":"Overview"},{"location":"parsing/#parsing-beancount-types","text":"","title":"Parsing Beancount Types"},{"location":"parsing/#parsing-files","text":"The parse_loader function provides a convenient interface for parsing the results of the beancount.loader functions. For example, one can convert all entries loaded from a Beancount file to their respective models like so: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) The BeancountFile model provides access to the parsed entries, errors, and options returned by the loader.","title":"Parsing Files"},{"location":"parsing/#parsing-query-results","text":"The parse_query function provides an interface for parsing the results of running a Beancount query: import bdantic from beancount import loader from beancount.query import query entries , _ , options = loader . load_file ( \"ledger.beancount\" ) query = \"SELECT date, narration, account, position\" result = query . run_query ( entries , options , query ) parsed_result = bdantic . parse_query ( result ) The QueryResult returned contains the column and row data with all Beancount types automatically parsed into models.","title":"Parsing Query Results"},{"location":"parsing/#parsing-realizations","text":"The realization.realize Beancount function takes a list of entries and uses them to calculate data about the accounts included in those entries. It returns a realization.RealAccount which is a dict like object that contains the entire account hierarchy. This object can be parsed: import bdantic from beancount.core import realization entries , _ , options = loader . load_file ( \"ledger.beancount\" ) real = realization . realize ( entries ) parsed_real = bdantic . parse ( real ) An additional Account model is provided and can be obtained by parsing it directly from a realization.RealAccount or calling the to_account method on a RealAccount . This model offers a simplified view of a single account and is thus easier to render.","title":"Parsing Realizations"},{"location":"parsing/#internal","text":"Internally, parsing is accomplished by abusing the fact that most objects have a __dict__ property and all NamedTuple objects have a _asdict() method. Since Beancount makes heavy use of NamedTuple objects this fact is used by the recursive_parse function to recursively create a dictionary representation of any complex Beancount type. Pydantic models have a parse_obj method which takes in a dictionary and performs validation, producing a model if all validation checks pass. The nested dictionary produced is fed into this method to create the models.","title":"Internal"},{"location":"rendering/","text":"Rendering Overview Since all models inherit from Pydantic they gain access to useful methods for rendering the contained data in different formats. Namely, the ability to generate JSON: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) js = bfile . json () print ( js ) # Look ma, my beancount data in JSON! This allows, for example, processing some Beancount data and then exporting it to another language or tool which can ingest JSON. The resulting JSON can be parsed back into a model: from bdantic.models import BeancountFile bfile = BeancountFile . parse_raw ( js ) This behavior allows one to write or generate Beancount constructs in JSON and then parse them back into their native types in Python. Syntax In addition to the support provided by Pydantic, directive models also provide a useful method for generating raw Beancount syntax: from bdantic.models import Amount , Posting , Transaction from datetime import date from decimal import Decimal txn = Transaction ( date = date . today (), meta = {}, flag = \"*\" , payee = \"Home Depot\" , narration = \"Tools n stuff\" , tags = None , links = None , postings = [ Posting ( account = \"Assets:Bank:Cash\" , units = Amount ( number = Decimal ( - 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), Posting ( account = \"Expenses:HomeDepot\" , units = Amount ( number = Decimal ( 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), ], ) print ( txn . syntax ()) Combined with the above, it's possible to go all the way from JSON to valid Beancount syntax with the use of bdantic .","title":"Rendering"},{"location":"rendering/#rendering","text":"","title":"Rendering"},{"location":"rendering/#overview","text":"Since all models inherit from Pydantic they gain access to useful methods for rendering the contained data in different formats. Namely, the ability to generate JSON: import bdantic from beancount import loader bfile = bdantic . parse_loader ( * loader . load_file ( \"ledger.beancount\" )) js = bfile . json () print ( js ) # Look ma, my beancount data in JSON! This allows, for example, processing some Beancount data and then exporting it to another language or tool which can ingest JSON. The resulting JSON can be parsed back into a model: from bdantic.models import BeancountFile bfile = BeancountFile . parse_raw ( js ) This behavior allows one to write or generate Beancount constructs in JSON and then parse them back into their native types in Python.","title":"Overview"},{"location":"rendering/#syntax","text":"In addition to the support provided by Pydantic, directive models also provide a useful method for generating raw Beancount syntax: from bdantic.models import Amount , Posting , Transaction from datetime import date from decimal import Decimal txn = Transaction ( date = date . today (), meta = {}, flag = \"*\" , payee = \"Home Depot\" , narration = \"Tools n stuff\" , tags = None , links = None , postings = [ Posting ( account = \"Assets:Bank:Cash\" , units = Amount ( number = Decimal ( - 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), Posting ( account = \"Expenses:HomeDepot\" , units = Amount ( number = Decimal ( 142.32 ), currency = \"USD\" ), cost = None , CostSpec = None , flag = None , meta = {}, ), ], ) print ( txn . syntax ()) Combined with the above, it's possible to go all the way from JSON to valid Beancount syntax with the use of bdantic .","title":"Syntax"},{"location":"api/models/","text":"Parse base Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries. Base ( BaseModel , Generic ) pydantic-model The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) json ( self , * , include = None , exclude = None , by_alias = True , skip_defaults = None , exclude_unset = False , exclude_defaults = False , exclude_none = True , encoder = None , models_as_dict = True , ** dumps_kwargs ) Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) select ( self , expr , model = None ) Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None BaseDict ( Base , Generic ) pydantic-model A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values () BaseFiltered ( Base ) pydantic-model A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None filter ( self , expr ) Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None BaseList ( BaseFiltered , Generic ) pydantic-model A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v filter_dict ( meta ) Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta is_named_tuple ( obj ) Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) ) recursive_export ( b ) Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result recursive_parse ( b ) Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result data Provides models for the core beancount data types. Amount ( Base ) pydantic-model A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ] Cost ( Base ) pydantic-model A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ] CostSpec ( Base ) pydantic-model A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ] Inventory ( BaseList ) pydantic-model A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) Position ( Base ) pydantic-model A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ] directives Provides models for all beancount directives. Balance ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ] BaseDirective ( Base ) pydantic-model A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) syntax ( self ) Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) Close ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account Commodity ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str Custom ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ] Document ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ] Event ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str Meta ( BaseModel ) pydantic-model Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow Note ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str Open ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ] Pad ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account Posting ( Base ) pydantic-model A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]] Price ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount Query ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str Transaction ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ] TxnPosting ( Base ) pydantic-model A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting display Provides models for constructing a DisplayContext. CurrencyContext ( Base ) pydantic-model A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx export ( self ) Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx parse ( obj ) classmethod Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) DisplayContext ( Base ) pydantic-model A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx export ( self ) Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx parse ( obj ) classmethod Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) Distribution ( Base ) pydantic-model A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist export ( self ) Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist parse ( obj ) classmethod Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) file Provides models for representing the contents of a parsed beancount file. BeancountFile ( Base ) pydantic-model A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) export ( self ) Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) parse ( obj ) classmethod Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) Directives ( BaseList ) pydantic-model A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs export ( self ) Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs parse ( obj ) classmethod Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) Options ( BaseDict ) pydantic-model A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d export ( self ) Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d parse ( obj ) classmethod Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) query Provides models for representing the results of running a query. QueryColumn ( BaseModel ) pydantic-model A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str QueryResult ( Base ) pydantic-model A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) export ( self ) Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) parse ( obj ) classmethod Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) realize Provides models for representing the results of running a realization. Account ( BaseModel ) pydantic-model A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError from_real ( ra ) staticmethod Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) parse ( obj ) staticmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) RealAccount ( Base ) pydantic-model A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) export ( self ) Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra parse ( obj ) classmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) to_account ( self ) Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) TxnPostings ( BaseList ) pydantic-model A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] export ( self ) Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"Parse"},{"location":"api/models/#parse","text":"","title":"Parse"},{"location":"api/models/#bdantic.models.base","text":"Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries.","title":"base"},{"location":"api/models/#bdantic.models.base.Base","text":"The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn )","title":"Base"},{"location":"api/models/#bdantic.models.base.Base.export","text":"Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self ))","title":"export()"},{"location":"api/models/#bdantic.models.base.Base.json","text":"Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , )","title":"json()"},{"location":"api/models/#bdantic.models.base.Base.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj ))","title":"parse()"},{"location":"api/models/#bdantic.models.base.Base.select","text":"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None","title":"select()"},{"location":"api/models/#bdantic.models.base.BaseDict","text":"A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values ()","title":"BaseDict"},{"location":"api/models/#bdantic.models.base.BaseFiltered","text":"A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"BaseFiltered"},{"location":"api/models/#bdantic.models.base.BaseFiltered.filter","text":"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"filter()"},{"location":"api/models/#bdantic.models.base.BaseList","text":"A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v","title":"BaseList"},{"location":"api/models/#bdantic.models.base.filter_dict","text":"Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta","title":"filter_dict()"},{"location":"api/models/#bdantic.models.base.is_named_tuple","text":"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) )","title":"is_named_tuple()"},{"location":"api/models/#bdantic.models.base.recursive_export","text":"Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result","title":"recursive_export()"},{"location":"api/models/#bdantic.models.base.recursive_parse","text":"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result","title":"recursive_parse()"},{"location":"api/models/#bdantic.models.data","text":"Provides models for the core beancount data types.","title":"data"},{"location":"api/models/#bdantic.models.data.Amount","text":"A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ]","title":"Amount"},{"location":"api/models/#bdantic.models.data.Cost","text":"A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ]","title":"Cost"},{"location":"api/models/#bdantic.models.data.CostSpec","text":"A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ]","title":"CostSpec"},{"location":"api/models/#bdantic.models.data.Inventory","text":"A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"Inventory"},{"location":"api/models/#bdantic.models.data.Inventory.export","text":"Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"export()"},{"location":"api/models/#bdantic.models.data.Inventory.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions )","title":"parse()"},{"location":"api/models/#bdantic.models.data.Position","text":"A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ]","title":"Position"},{"location":"api/models/#bdantic.models.directives","text":"Provides models for all beancount directives.","title":"directives"},{"location":"api/models/#bdantic.models.directives.Balance","text":"A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ]","title":"Balance"},{"location":"api/models/#bdantic.models.directives.BaseDirective","text":"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"BaseDirective"},{"location":"api/models/#bdantic.models.directives.BaseDirective.syntax","text":"Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"syntax()"},{"location":"api/models/#bdantic.models.directives.Close","text":"A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account","title":"Close"},{"location":"api/models/#bdantic.models.directives.Commodity","text":"A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str","title":"Commodity"},{"location":"api/models/#bdantic.models.directives.Custom","text":"A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ]","title":"Custom"},{"location":"api/models/#bdantic.models.directives.Document","text":"A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ]","title":"Document"},{"location":"api/models/#bdantic.models.directives.Event","text":"A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str","title":"Event"},{"location":"api/models/#bdantic.models.directives.Meta","text":"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow","title":"Meta"},{"location":"api/models/#bdantic.models.directives.Note","text":"A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str","title":"Note"},{"location":"api/models/#bdantic.models.directives.Open","text":"A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ]","title":"Open"},{"location":"api/models/#bdantic.models.directives.Pad","text":"A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account","title":"Pad"},{"location":"api/models/#bdantic.models.directives.Posting","text":"A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]]","title":"Posting"},{"location":"api/models/#bdantic.models.directives.Price","text":"A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount","title":"Price"},{"location":"api/models/#bdantic.models.directives.Query","text":"A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str","title":"Query"},{"location":"api/models/#bdantic.models.directives.Transaction","text":"A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ]","title":"Transaction"},{"location":"api/models/#bdantic.models.directives.TxnPosting","text":"A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting","title":"TxnPosting"},{"location":"api/models/#bdantic.models.display","text":"Provides models for constructing a DisplayContext.","title":"display"},{"location":"api/models/#bdantic.models.display.CurrencyContext","text":"A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"CurrencyContext"},{"location":"api/models/#bdantic.models.display.CurrencyContext.export","text":"Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"export()"},{"location":"api/models/#bdantic.models.display.CurrencyContext.parse","text":"Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), )","title":"parse()"},{"location":"api/models/#bdantic.models.display.DisplayContext","text":"A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"DisplayContext"},{"location":"api/models/#bdantic.models.display.DisplayContext.export","text":"Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"export()"},{"location":"api/models/#bdantic.models.display.DisplayContext.parse","text":"Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas )","title":"parse()"},{"location":"api/models/#bdantic.models.display.Distribution","text":"A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"Distribution"},{"location":"api/models/#bdantic.models.display.Distribution.export","text":"Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"export()"},{"location":"api/models/#bdantic.models.display.Distribution.parse","text":"Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist )","title":"parse()"},{"location":"api/models/#bdantic.models.file","text":"Provides models for representing the contents of a parsed beancount file.","title":"file"},{"location":"api/models/#bdantic.models.file.BeancountFile","text":"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"BeancountFile"},{"location":"api/models/#bdantic.models.file.BeancountFile.export","text":"Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"export()"},{"location":"api/models/#bdantic.models.file.BeancountFile.parse","text":"Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], )","title":"parse()"},{"location":"api/models/#bdantic.models.file.Directives","text":"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"Directives"},{"location":"api/models/#bdantic.models.file.Directives.export","text":"Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"export()"},{"location":"api/models/#bdantic.models.file.Directives.parse","text":"Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs )","title":"parse()"},{"location":"api/models/#bdantic.models.file.Options","text":"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"Options"},{"location":"api/models/#bdantic.models.file.Options.export","text":"Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"export()"},{"location":"api/models/#bdantic.models.file.Options.parse","text":"Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d )","title":"parse()"},{"location":"api/models/#bdantic.models.query","text":"Provides models for representing the results of running a query.","title":"query"},{"location":"api/models/#bdantic.models.query.QueryColumn","text":"A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str","title":"QueryColumn"},{"location":"api/models/#bdantic.models.query.QueryResult","text":"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"QueryResult"},{"location":"api/models/#bdantic.models.query.QueryResult.export","text":"Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"export()"},{"location":"api/models/#bdantic.models.query.QueryResult.parse","text":"Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows )","title":"parse()"},{"location":"api/models/#bdantic.models.realize","text":"Provides models for representing the results of running a realization.","title":"realize"},{"location":"api/models/#bdantic.models.realize.Account","text":"A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError","title":"Account"},{"location":"api/models/#bdantic.models.realize.Account.from_real","text":"Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , )","title":"from_real()"},{"location":"api/models/#bdantic.models.realize.Account.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , )","title":"parse()"},{"location":"api/models/#bdantic.models.realize.RealAccount","text":"A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"RealAccount"},{"location":"api/models/#bdantic.models.realize.RealAccount.export","text":"Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra","title":"export()"},{"location":"api/models/#bdantic.models.realize.RealAccount.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore )","title":"parse()"},{"location":"api/models/#bdantic.models.realize.RealAccount.to_account","text":"Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"to_account()"},{"location":"api/models/#bdantic.models.realize.TxnPostings","text":"A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"TxnPostings"},{"location":"api/models/#bdantic.models.realize.TxnPostings.export","text":"Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"export()"},{"location":"api/models/#bdantic.models.realize.TxnPostings.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"parse()"},{"location":"api/parse/","text":"Parse Provides functions for parsing and exporting beancont types/models. These functions are stricly helper functions in that parsing/exporting can be done directly by importing the appropriate model and accessing its parse/export method. However, most of these functions take any supported type/model as an input which results in less imports in your code. export ( model ) Exports a Model to its respective BeancountType. Parameters: Name Type Description Default model Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount] A valid Model required Returns: Type Description Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory] The associated BeancountType for this Model Source code in bdantic/parse.py def export ( model : Model ) -> BeancountType : \"\"\"Exports a Model to its respective BeancountType. Args: model: A valid Model Returns: The associated BeancountType for this Model \"\"\" return model . export () export_all ( models ) Exports a list of Models into a list of their respective BeancountType. Parameters: Name Type Description Default models Sequence[Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount]] A list of Models required Returns: Type Description List[Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory]] A list of associated BeancountType's for each model Source code in bdantic/parse.py def export_all ( models : Sequence [ Model ]) -> List [ BeancountType ]: \"\"\"Exports a list of Models into a list of their respective BeancountType. Args: models: A list of Models Returns: A list of associated BeancountType's for each model \"\"\" return [ export ( model ) for model in models ] parse ( obj ) Parses a BeancountType into it's respective Model. Parameters: Name Type Description Default obj Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory] A valid BeancountType required Returns: Type Description Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount] The associated Model for the given BeancountType Source code in bdantic/parse.py def parse ( obj : BeancountType ) -> Model : \"\"\"Parses a BeancountType into it's respective Model. Args: obj: A valid BeancountType Returns: The associated Model for the given BeancountType \"\"\" return type_map [ type ( obj )] . parse ( obj ) # type: ignore parse_all ( objs ) Parses a list of BeancountTypes's into a list of their respective Models. Parameters: Name Type Description Default objs Sequence[Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory]] A list of valid BeancountType's required Returns: Type Description List[Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount]] A list of associated Models for each BeancountType Source code in bdantic/parse.py def parse_all ( objs : Sequence [ BeancountType ], ) -> List [ Model ]: \"\"\"Parses a list of BeancountTypes's into a list of their respective Models. Args: objs: A list of valid BeancountType's Returns: A list of associated Models for each BeancountType \"\"\" return [ parse ( obj ) for obj in objs ] parse_directives ( entries ) Parses a list of directives into a Directives model. Parameters: Name Type Description Default entries List[Union[beancount.core.data.Open, beancount.core.data.Close, beancount.core.data.Commodity, beancount.core.data.Pad, beancount.core.data.Balance, beancount.core.data.Transaction, beancount.core.data.Note, beancount.core.data.Event, beancount.core.data.Query, beancount.core.data.Price, beancount.core.data.Document, beancount.core.data.Custom]] The list of directives as returned by the parser required Returns: Type Description Directives A Directives instance Source code in bdantic/parse.py def parse_directives ( entries : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of directives into a Directives model. Args: entries: The list of directives as returned by the parser Returns: A Directives instance \"\"\" return Directives . parse ( entries ) parse_loader ( entries , errors , options ) Parses the result from calling the beancount loader to a BeancountFile. Parameters: Name Type Description Default entries List[Union[beancount.core.data.Open, beancount.core.data.Close, beancount.core.data.Commodity, beancount.core.data.Pad, beancount.core.data.Balance, beancount.core.data.Transaction, beancount.core.data.Note, beancount.core.data.Event, beancount.core.data.Query, beancount.core.data.Price, beancount.core.data.Document, beancount.core.data.Custom]] The entries return from the loader required errors List[Any] The errors returned from a loader required options Dict[str, Any] The options returned from a loder required Returns: Type Description BeancountFile A BeancountFile model Source code in bdantic/parse.py def parse_loader ( entries : List [ data . Directive ], errors : List [ Any ], options : Dict [ str , Any ] ) -> BeancountFile : \"\"\"Parses the result from calling the beancount loader to a BeancountFile. Args: entries: The entries return from the loader errors: The errors returned from a loader options: The options returned from a loder Returns: A BeancountFile model \"\"\" return BeancountFile . parse (( entries , errors , options )) parse_query ( query_result ) Parses the response from running query.run_query() on a list of entries. Parameters: Name Type Description Default query_result Tuple[List[Tuple[str, Type]], List[Any]] The query result to parse required Returns: Type Description QueryResult A QueryResult model Source code in bdantic/parse.py def parse_query ( query_result : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses the response from running query.run_query() on a list of entries. Args: query_result: The query result to parse Returns: A QueryResult model \"\"\" return QueryResult . parse ( query_result )","title":"parse"},{"location":"api/parse/#parse","text":"Provides functions for parsing and exporting beancont types/models. These functions are stricly helper functions in that parsing/exporting can be done directly by importing the appropriate model and accessing its parse/export method. However, most of these functions take any supported type/model as an input which results in less imports in your code.","title":"Parse"},{"location":"api/parse/#bdantic.parse.export","text":"Exports a Model to its respective BeancountType. Parameters: Name Type Description Default model Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount] A valid Model required Returns: Type Description Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory] The associated BeancountType for this Model Source code in bdantic/parse.py def export ( model : Model ) -> BeancountType : \"\"\"Exports a Model to its respective BeancountType. Args: model: A valid Model Returns: The associated BeancountType for this Model \"\"\" return model . export ()","title":"export()"},{"location":"api/parse/#bdantic.parse.export_all","text":"Exports a list of Models into a list of their respective BeancountType. Parameters: Name Type Description Default models Sequence[Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount]] A list of Models required Returns: Type Description List[Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory]] A list of associated BeancountType's for each model Source code in bdantic/parse.py def export_all ( models : Sequence [ Model ]) -> List [ BeancountType ]: \"\"\"Exports a list of Models into a list of their respective BeancountType. Args: models: A list of Models Returns: A list of associated BeancountType's for each model \"\"\" return [ export ( model ) for model in models ]","title":"export_all()"},{"location":"api/parse/#bdantic.parse.parse","text":"Parses a BeancountType into it's respective Model. Parameters: Name Type Description Default obj Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory] A valid BeancountType required Returns: Type Description Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount] The associated Model for the given BeancountType Source code in bdantic/parse.py def parse ( obj : BeancountType ) -> Model : \"\"\"Parses a BeancountType into it's respective Model. Args: obj: A valid BeancountType Returns: The associated Model for the given BeancountType \"\"\" return type_map [ type ( obj )] . parse ( obj ) # type: ignore","title":"parse()"},{"location":"api/parse/#bdantic.parse.parse_all","text":"Parses a list of BeancountTypes's into a list of their respective Models. Parameters: Name Type Description Default objs Sequence[Union[beancount.core.amount.Amount, beancount.core.data.Balance, beancount.core.data.Close, beancount.core.data.Open, beancount.core.position.Cost, beancount.core.position.CostSpec, beancount.core.data.Commodity, beancount.core.data.Custom, beancount.core.data.Document, beancount.core.data.Event, beancount.core.data.Note, beancount.core.data.Pad, beancount.core.position.Position, beancount.core.data.Posting, beancount.core.data.Price, beancount.core.data.Query, beancount.core.realization.RealAccount, beancount.core.data.Transaction, beancount.core.data.TxnPosting, beancount.core.display_context._CurrencyContext, beancount.core.display_context.DisplayContext, beancount.core.distribution.Distribution, beancount.core.inventory.Inventory]] A list of valid BeancountType's required Returns: Type Description List[Union[bdantic.models.directives.Balance, bdantic.models.directives.Close, bdantic.models.directives.Commodity, bdantic.models.directives.Custom, bdantic.models.directives.Document, bdantic.models.directives.Event, bdantic.models.directives.Note, bdantic.models.directives.Open, bdantic.models.directives.Pad, bdantic.models.directives.Price, bdantic.models.directives.Query, bdantic.models.directives.Transaction, bdantic.models.data.Amount, bdantic.models.data.Cost, bdantic.models.data.CostSpec, bdantic.models.data.Position, bdantic.models.directives.Posting, bdantic.models.directives.TxnPosting, bdantic.models.display.CurrencyContext, bdantic.models.display.DisplayContext, bdantic.models.display.Distribution, bdantic.models.data.Inventory, bdantic.models.realize.RealAccount]] A list of associated Models for each BeancountType Source code in bdantic/parse.py def parse_all ( objs : Sequence [ BeancountType ], ) -> List [ Model ]: \"\"\"Parses a list of BeancountTypes's into a list of their respective Models. Args: objs: A list of valid BeancountType's Returns: A list of associated Models for each BeancountType \"\"\" return [ parse ( obj ) for obj in objs ]","title":"parse_all()"},{"location":"api/parse/#bdantic.parse.parse_directives","text":"Parses a list of directives into a Directives model. Parameters: Name Type Description Default entries List[Union[beancount.core.data.Open, beancount.core.data.Close, beancount.core.data.Commodity, beancount.core.data.Pad, beancount.core.data.Balance, beancount.core.data.Transaction, beancount.core.data.Note, beancount.core.data.Event, beancount.core.data.Query, beancount.core.data.Price, beancount.core.data.Document, beancount.core.data.Custom]] The list of directives as returned by the parser required Returns: Type Description Directives A Directives instance Source code in bdantic/parse.py def parse_directives ( entries : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of directives into a Directives model. Args: entries: The list of directives as returned by the parser Returns: A Directives instance \"\"\" return Directives . parse ( entries )","title":"parse_directives()"},{"location":"api/parse/#bdantic.parse.parse_loader","text":"Parses the result from calling the beancount loader to a BeancountFile. Parameters: Name Type Description Default entries List[Union[beancount.core.data.Open, beancount.core.data.Close, beancount.core.data.Commodity, beancount.core.data.Pad, beancount.core.data.Balance, beancount.core.data.Transaction, beancount.core.data.Note, beancount.core.data.Event, beancount.core.data.Query, beancount.core.data.Price, beancount.core.data.Document, beancount.core.data.Custom]] The entries return from the loader required errors List[Any] The errors returned from a loader required options Dict[str, Any] The options returned from a loder required Returns: Type Description BeancountFile A BeancountFile model Source code in bdantic/parse.py def parse_loader ( entries : List [ data . Directive ], errors : List [ Any ], options : Dict [ str , Any ] ) -> BeancountFile : \"\"\"Parses the result from calling the beancount loader to a BeancountFile. Args: entries: The entries return from the loader errors: The errors returned from a loader options: The options returned from a loder Returns: A BeancountFile model \"\"\" return BeancountFile . parse (( entries , errors , options ))","title":"parse_loader()"},{"location":"api/parse/#bdantic.parse.parse_query","text":"Parses the response from running query.run_query() on a list of entries. Parameters: Name Type Description Default query_result Tuple[List[Tuple[str, Type]], List[Any]] The query result to parse required Returns: Type Description QueryResult A QueryResult model Source code in bdantic/parse.py def parse_query ( query_result : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses the response from running query.run_query() on a list of entries. Args: query_result: The query result to parse Returns: A QueryResult model \"\"\" return QueryResult . parse ( query_result )","title":"parse_query()"},{"location":"api/models/base/","text":"Base Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries. Base ( BaseModel , Generic ) pydantic-model The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) json ( self , * , include = None , exclude = None , by_alias = True , skip_defaults = None , exclude_unset = False , exclude_defaults = False , exclude_none = True , encoder = None , models_as_dict = True , ** dumps_kwargs ) Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) select ( self , expr , model = None ) Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None BaseDict ( Base , Generic ) pydantic-model A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values () BaseFiltered ( Base ) pydantic-model A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None filter ( self , expr ) Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None BaseList ( BaseFiltered , Generic ) pydantic-model A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v filter_dict ( meta ) Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta is_named_tuple ( obj ) Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) ) recursive_export ( b ) Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result recursive_parse ( b ) Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result","title":"base"},{"location":"api/models/base/#base","text":"Provides the base models from which every other model inherits from. Most models share common behavior, namely the ability to parse and export. Models which are based from a beancount type which is a NamedTuple all share the same parse/export code inherited from the Base class. Models which need specialized code for parsing/exporting will override these methods appropriately. Additionally, models which wrap lists or dictionaries have a dedicated base class for allowing filtering and providing the expected pythonic methods to make them behave as lists/dictionaries.","title":"Base"},{"location":"api/models/base/#bdantic.models.base.Base","text":"The base model class used for most models in bdantic. Source code in bdantic/models/base.py class Base ( BaseModel , Generic [ T ]): \"\"\"The base model class used for most models in bdantic.\"\"\" _sibling : Type [ T ] class Config : json_loads = orjson . loads json_dumps = orjson_dumps def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , ) @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj )) def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self )) def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None def _mutate ( self , fn : Callable ) -> Any : \"\"\"Mutates the model by converting it to a dict and calling fn(). The given fn is recursively applied to the model fields and all child fields. The purpose of this method is to apply a transformation to potentially deeply nested child objects (i.e. convert all dates within a model and it's children to strings). Args: fn: The function to mutate with Returns: A mutated dictionary representation of the model and it's children. \"\"\" return _map ( self . dict (), fn )","title":"Base"},{"location":"api/models/base/#bdantic.models.base.Base.export","text":"Exports this model into it's associated beancount type Returns: Type Description T A new instance of the beancount type Source code in bdantic/models/base.py def export ( self : S ) -> T : \"\"\"Exports this model into it's associated beancount type Returns: A new instance of the beancount type \"\"\" return self . _sibling ( ** recursive_export ( self ))","title":"export()"},{"location":"api/models/base/#bdantic.models.base.Base.json","text":"Generate a JSON representation of the model, include and exclude arguments as per dict() . encoder is an optional function to supply as default to json.dumps(), other arguments as per json.dumps() . Source code in bdantic/models/base.py def json ( self , * , include : Any = None , exclude : Any = None , by_alias : bool = True , skip_defaults : bool = None , exclude_unset : bool = False , exclude_defaults : bool = False , exclude_none : bool = True , encoder : Optional [ Callable [[ Any ], Any ]] = None , models_as_dict : bool = True , ** dumps_kwargs : Any , ) -> str : return super () . json ( include = include , exclude = exclude , by_alias = by_alias , skip_defaults = skip_defaults , exclude_unset = exclude_unset , exclude_defaults = exclude_defaults , exclude_none = exclude_none , encoder = encoder , models_as_dict = models_as_dict , ** dumps_kwargs , )","title":"json()"},{"location":"api/models/base/#bdantic.models.base.Base.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj T The Beancount type to parse required Returns: Type Description S A new instance of this model Source code in bdantic/models/base.py @classmethod def parse ( cls : Type [ S ], obj : T ) -> S : \"\"\"Parses a beancount type into this model Args: obj: The Beancount type to parse Returns: A new instance of this model \"\"\" return cls . parse_obj ( recursive_parse ( obj ))","title":"parse()"},{"location":"api/models/base/#bdantic.models.base.Base.select","text":"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Parameters: Name Type Description Default expr str The jmespath expression required !!! result Result from applying the given expression Source code in bdantic/models/base.py def select ( self , expr : str , model : Type [ BaseModel ] = None ) -> Optional [ Any ]: \"\"\"Selects from this model using a jmespath expression. The model is converted to a dictionary and then the given jmespath expression is applied to the dictionary. The result of the selection process is dependent on the expression used and can be any combination of data contained within the model or its children. Note that this method automatically converts dates into ISO formatted strings and Decimals into floats in order to increase compatability with jmespath. The result can optionally be parsed into a model by passing the type of model. If the result is a list, all child elements will be converted into the given model. Args: expr: The jmespath expression Result: Result from applying the given expression \"\"\" converted = self . _mutate ( _convert ) if hasattr ( self , \"__root__\" ): result = jmespath . search ( expr , converted [ \"__root__\" ]) obj = { \"__root__\" : result } else : obj = jmespath . search ( expr , converted ) if obj : # Sometimes jmespath returns False if model : if isinstance ( obj , list ): return [ model . parse_obj ( o ) for o in obj ] else : return model . parse_obj ( obj ) return obj else : return None","title":"select()"},{"location":"api/models/base/#bdantic.models.base.BaseDict","text":"A base model that wraps a dictionary. Source code in bdantic/models/base.py class BaseDict ( Base , Generic [ S ]): \"\"\"A base model that wraps a dictionary.\"\"\" __root__ : Dict [ str , S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , key : str ): return self . __root__ [ key ] def __delitem__ ( self , key : str ): del self . __root__ [ key ] def __setitem__ ( self , key : str , v : Any ): self . __root__ [ key ] = v def __iter__ ( self ): for k in self . __root__ . keys (): yield k def items ( self ): return self . __root__ . items () def keys ( self ): return self . __root__ . keys () def values ( self ): return self . __root__ . values ()","title":"BaseDict"},{"location":"api/models/base/#bdantic.models.base.BaseFiltered","text":"A base model which can be filtered. Source code in bdantic/models/base.py class BaseFiltered ( Base ): \"\"\"A base model which can be filtered.\"\"\" def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"BaseFiltered"},{"location":"api/models/base/#bdantic.models.base.BaseFiltered.filter","text":"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model. Source code in bdantic/models/base.py def filter ( self : S , expr : str ) -> Optional [ S ]: \"\"\"Filters this model using the given jmespath expression. Note that the given expression must return a result that can be parsed back into this model. If the expression mutates the object in an incompatible way then it's likely to raise an exception when Pydantic attempts to parse the result back into the model.\"\"\" obj = self . select ( expr ) if obj : return self . parse_obj ( obj ) else : return None","title":"filter()"},{"location":"api/models/base/#bdantic.models.base.BaseList","text":"A base model that wraps a list of objects. Source code in bdantic/models/base.py class BaseList ( BaseFiltered , Generic [ S ]): \"\"\"A base model that wraps a list of objects.\"\"\" __root__ : List [ S ] def __len__ ( self ) -> int : return len ( self . __root__ ) def __getitem__ ( self , i : int ): return self . __root__ [ i ] def __delitem__ ( self , i : int ): del self . __root__ [ i ] def __setitem__ ( self , i : int , v : S ): self . __root__ [ i ] = v def __iter__ ( self ): for v in self . __root__ : yield v","title":"BaseList"},{"location":"api/models/base/#bdantic.models.base.filter_dict","text":"Recursively filters a dictionary to remove non-JSON serializable keys. Parameters: Name Type Description Default meta Dict[Any, Any] The dictionary to filter required Returns: Type Description Dict The filtered dictionary Source code in bdantic/models/base.py def filter_dict ( meta : Dict [ Any , Any ]) -> Dict : \"\"\"Recursively filters a dictionary to remove non-JSON serializable keys. Args: meta: The dictionary to filter Returns: The filtered dictionary \"\"\" new_meta : Dict = {} for key , value in meta . items (): if type ( key ) not in [ str , int , float , bool , None ]: continue if isinstance ( value , dict ): new_meta [ key ] = filter_dict ( value ) elif isinstance ( value , list ): new_meta [ key ] = [ filter_dict ( v ) for v in value if isinstance ( v , dict ) ] else : new_meta [ key ] = value return new_meta","title":"filter_dict()"},{"location":"api/models/base/#bdantic.models.base.is_named_tuple","text":"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Parameters: Name Type Description Default obj Any The object to check against required Returns: Type Description bool True if the object is a NamedTuple, False otherwise Source code in bdantic/models/base.py def is_named_tuple ( obj : Any ) -> bool : \"\"\"Attempts to determine if an object is a NamedTuple. The method is not fullproof and attempts to determine if the given object is a tuple which happens to have _asdict() and _fields() methods. It's possible to generate false positives but no such case exists within the beancount package. Args: obj: The object to check against Returns: True if the object is a NamedTuple, False otherwise \"\"\" return ( isinstance ( obj , tuple ) and hasattr ( obj , \"_asdict\" ) and hasattr ( obj , \"_fields\" ) )","title":"is_named_tuple()"},{"location":"api/models/base/#bdantic.models.base.recursive_export","text":"Recursively exports a ModelTuple into a nested dictionary Parameters: Name Type Description Default b Any The ModelTuple to recursively export required Returns: Type Description Dict[str, Any] A nested dictionary with all exported Beancount types Source code in bdantic/models/base.py def recursive_export ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively exports a ModelTuple into a nested dictionary Args: b: The ModelTuple to recursively export Returns: A nested dictionary with all exported Beancount types \"\"\" result : Dict [ str , Any ] = {} for key , value in b . __dict__ . items (): if key == \"ty\" : continue elif key == \"meta\" : if not isinstance ( value , dict ) and value : result [ key ] = value . dict ( by_alias = True , exclude_none = True , exclude_unset = True ) else : result [ key ] = value continue if isinstance ( value , Base ): result [ key ] = value . _sibling ( ** recursive_export ( value )) elif isinstance ( value , list ) and value : if isinstance ( value [ 0 ], Base ): result [ key ] = [ c . _sibling ( ** recursive_export ( c )) for c in value ] else : result [ key ] = value else : result [ key ] = value return result","title":"recursive_export()"},{"location":"api/models/base/#bdantic.models.base.recursive_parse","text":"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Parameters: Name Type Description Default b Any The BeancountType to recursively parse required Returns: Type Description Dict[str, Any] A nested dictionary with all parsed models. Source code in bdantic/models/base.py def recursive_parse ( b : Any ) -> Dict [ str , Any ]: \"\"\"Recursively parses a BeancountType into a nested dictionary of models. Since a NamedTuple can be represented as a dictionary using the bultin _asdict() method, this function attempts to recursively convert a BeancountTuple and any children types into a nested dictionary structure. Args: b: The BeancountType to recursively parse Returns: A nested dictionary with all parsed models. \"\"\" result : Dict [ str , Any ] = {} for key , value in b . _asdict () . items (): if is_named_tuple ( value ): result [ key ] = recursive_parse ( value ) elif isinstance ( value , list ) and value : if is_named_tuple ( value [ 0 ]): result [ key ] = [ recursive_parse ( c ) for c in value ] else : result [ key ] = value elif isinstance ( value , dict ): result [ key ] = filter_dict ( value ) else : result [ key ] = value return result","title":"recursive_parse()"},{"location":"api/models/data/","text":"Data Provides models for the core beancount data types. Amount ( Base ) pydantic-model A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ] Cost ( Base ) pydantic-model A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ] CostSpec ( Base ) pydantic-model A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ] Inventory ( BaseList ) pydantic-model A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) export ( self ) Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions ) parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) Position ( Base ) pydantic-model A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ]","title":"data"},{"location":"api/models/data/#data","text":"Provides models for the core beancount data types.","title":"Data"},{"location":"api/models/data/#bdantic.models.data.Amount","text":"A model representing a beancount.core.amount.Amount . Attributes: Name Type Description ty Literal['Amount'] A string literal identifying this model. number Optional[decimal.Decimal] The value of the amount. currency Optional[str] The amount currency. Source code in bdantic/models/data.py class Amount ( Base ): \"\"\"A model representing a `beancount.core.amount.Amount`. Attributes: ty: A string literal identifying this model. number: The value of the amount. currency: The amount currency. \"\"\" _sibling = amount . Amount ty : Literal [ \"Amount\" ] = \"Amount\" number : Optional [ Decimal ] currency : Optional [ Currency ]","title":"Amount"},{"location":"api/models/data/#bdantic.models.data.Cost","text":"A model representing a beancount.core.position.Cost . Attributes: Name Type Description ty Literal['Cost'] A string literal identifying this model. number Decimal The per-unit cost. currency str The cost currency. date date A date that the lot was created at. label Optional[str] An optional label for the lot. Source code in bdantic/models/data.py class Cost ( Base ): \"\"\"A model representing a `beancount.core.position.Cost`. Attributes: ty: A string literal identifying this model. number: The per-unit cost. currency: The cost currency. date: A date that the lot was created at. label: An optional label for the lot. \"\"\" _sibling = position . Cost ty : Literal [ \"Cost\" ] = \"Cost\" number : Decimal currency : Currency date : datetime . date label : Optional [ str ]","title":"Cost"},{"location":"api/models/data/#bdantic.models.data.CostSpec","text":"A model representing a beancount.core.position.CostSpec . Attributes: Name Type Description ty Literal['CostSpec'] A string literal identifying this model. number_per Optional[decimal.Decimal] The cost/price per unit. number_total Optional[decimal.Decimal] The total cost/price, or None if unspecified. currency Optional[str] The commodity of the amount. date Optional[datetime.date] A date for the lot. label Optional[str] An optional label for the lot. merge Optional[bool] True if this specification calls for averaging the units of this lot's currency, or False if unspecified. Source code in bdantic/models/data.py class CostSpec ( Base ): \"\"\"A model representing a `beancount.core.position.CostSpec`. Attributes: ty: A string literal identifying this model. number_per: The cost/price per unit. number_total: The total cost/price, or None if unspecified. currency: The commodity of the amount. date: A date for the lot. label: An optional label for the lot. merge: True if this specification calls for averaging the units of this lot's currency, or False if unspecified. \"\"\" _sibling = position . CostSpec ty : Literal [ \"CostSpec\" ] = \"CostSpec\" number_per : Optional [ Decimal ] number_total : Optional [ Decimal ] currency : Optional [ Currency ] date : Optional [ datetime . date ] label : Optional [ str ] merge : Optional [ bool ]","title":"CostSpec"},{"location":"api/models/data/#bdantic.models.data.Inventory","text":"A model representing a beancount.core.inventory.Inventory . A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of Position models. It inherits basic list functionality and can be indexed/iterated over. Source code in bdantic/models/data.py class Inventory ( BaseList ): \"\"\"A model representing a `beancount.core.inventory.Inventory`. A beancount inventory mimics a dictionary, but ultimately the data underlying it is a list of Positions. This model represents this fact by wrapping a list of [Position][bdantic.models.data.Position] models. It inherits basic list functionality and can be indexed/iterated over.\"\"\" __root__ : List [ Position ] @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions ) def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"Inventory"},{"location":"api/models/data/#bdantic.models.data.Inventory.export","text":"Exports this model into it's associated beancount type Returns: Type Description inventory.Inventory A new instance of the beancount type Source code in bdantic/models/data.py def export ( self ) -> inventory . Inventory : positions = [ position . export () for position in self . __root__ ] return inventory . Inventory ( positions = positions )","title":"export()"},{"location":"api/models/data/#bdantic.models.data.Inventory.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj inventory.Inventory The Beancount type to parse required Returns: Type Description Inventory A new instance of this model Source code in bdantic/models/data.py @classmethod def parse ( cls , obj : inventory . Inventory ) -> Inventory : positions = [ Position . parse ( position ) for position in obj . get_positions () ] return Inventory ( __root__ = positions )","title":"parse()"},{"location":"api/models/data/#bdantic.models.data.Position","text":"A model representing a beancount.core.position.Position . Attributes: Name Type Description ty Literal['Position'] A string literal identifying this model. units Amount The number of units and its currency. cost Optional[bdantic.models.data.Cost] A Cost that represents the lot. Source code in bdantic/models/data.py class Position ( Base ): \"\"\"A model representing a `beancount.core.position.Position`. Attributes: ty: A string literal identifying this model. units: The number of units and its currency. cost: A Cost that represents the lot. \"\"\" _sibling = position . Position ty : Literal [ \"Position\" ] = \"Position\" units : Amount cost : Optional [ Cost ]","title":"Position"},{"location":"api/models/directives/","text":"Directives Provides models for all beancount directives. Balance ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ] BaseDirective ( Base ) pydantic-model A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) syntax ( self ) Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ()) Close ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account Commodity ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str Custom ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ] Document ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ] Event ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str Meta ( BaseModel ) pydantic-model Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow Note ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str Open ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ] Pad ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account Posting ( Base ) pydantic-model A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]] Price ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount Query ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str Transaction ( BaseDirective ) pydantic-model A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ] TxnPosting ( Base ) pydantic-model A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting","title":"directives"},{"location":"api/models/directives/#directives","text":"Provides models for all beancount directives.","title":"Directives"},{"location":"api/models/directives/#bdantic.models.directives.Balance","text":"A model representing a beancount.core.data.Balance . Attributes: Name Type Description ty Literal['Balance'] A string literal identifying this model. account str The account whose balance to check at the given date. amount Amount The number of expected units for the account at the given date. diff_amount Optional[bdantic.models.data.Amount] The difference between the expected and actual amounts. tolerance Optional[decimal.Decimal] The amount of tolerance to use in the verification. Source code in bdantic/models/directives.py class Balance ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Balance`. Attributes: ty: A string literal identifying this model. account: The account whose balance to check at the given date. amount: The number of expected units for the account at the given date. diff_amount: The difference between the expected and actual amounts. tolerance: The amount of tolerance to use in the verification. \"\"\" _sibling = data . Balance ty : Literal [ \"Balance\" ] = \"Balance\" account : Account amount : Amount tolerance : Optional [ Decimal ] diff_amount : Optional [ Amount ]","title":"Balance"},{"location":"api/models/directives/#bdantic.models.directives.BaseDirective","text":"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: Name Type Description ty A string literal identifying this model. date date The date for this directive. meta Optional[bdantic.models.directives.Meta] An optional dictionary of metadata attached to the directive. Source code in bdantic/models/directives.py class BaseDirective ( Base ): \"\"\"A base class containing common fields for a Beancount directive. All directives in beancount share two common fields: a date they were recorded and optional metadata attached to them. This class provides fields for both of these attributes which directive models inherit from. Additionally, all directives can be represented as raw beancount syntax and this class provides a method for converting a directive model into its equivalent beancount syntax. Attributes: ty: A string literal identifying this model. date: The date for this directive. meta: An optional dictionary of metadata attached to the directive. \"\"\" date : datetime . date meta : Optional [ Meta ] def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"BaseDirective"},{"location":"api/models/directives/#bdantic.models.directives.BaseDirective.syntax","text":"Converts this directive into it's equivalent beancount syntax. Source code in bdantic/models/directives.py def syntax ( self ) -> str : \"\"\"Converts this directive into it's equivalent beancount syntax.\"\"\" return printer . format_entry ( self . export ())","title":"syntax()"},{"location":"api/models/directives/#bdantic.models.directives.Close","text":"A model representing a beancount.core.data.Close . Attributes: Name Type Description ty Literal['Close'] A string literal identifying this model. account str The name of the account being closed. Source code in bdantic/models/directives.py class Close ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Close`. Attributes: ty: A string literal identifying this model. account: The name of the account being closed. \"\"\" _sibling = data . Close ty : Literal [ \"Close\" ] = \"Close\" account : Account","title":"Close"},{"location":"api/models/directives/#bdantic.models.directives.Commodity","text":"A model representing a beancount.core.data.Commodity . Attributes: Name Type Description ty Literal['Commodity'] A string literal identifying this model. currency str The commodity under consideration. Source code in bdantic/models/directives.py class Commodity ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Commodity`. Attributes: ty: A string literal identifying this model. currency: The commodity under consideration. \"\"\" _sibling = data . Commodity ty : Literal [ \"Commodity\" ] = \"Commodity\" currency : str","title":"Commodity"},{"location":"api/models/directives/#bdantic.models.directives.Custom","text":"A model representing a beancount.core.data.Custom . Attributes: Name Type Description ty Literal['Custom'] A string literal identifying this model. type str The type of this custom directive. values List[Any] A list of values of simple types supported by the grammar. Source code in bdantic/models/directives.py class Custom ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Custom`. Attributes: ty: A string literal identifying this model. type: The type of this custom directive. values: A list of values of simple types supported by the grammar. \"\"\" _sibling = data . Custom ty : Literal [ \"Custom\" ] = \"Custom\" type : str values : List [ Any ]","title":"Custom"},{"location":"api/models/directives/#bdantic.models.directives.Document","text":"A model representing a beancount.core.data.Document . Attributes: Name Type Description ty Literal['Document'] A string literal identifying this model. account str The account the document is associated with. filename str The absolute filename of the document. tags Optional[Set] A set of tag strings. links Optional[Set] A set of link strings. Source code in bdantic/models/directives.py class Document ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Document`. Attributes: ty: A string literal identifying this model. account: The account the document is associated with. filename: The absolute filename of the document. tags: A set of tag strings. links: A set of link strings. \"\"\" _sibling = data . Document ty : Literal [ \"Document\" ] = \"Document\" account : Account filename : str tags : Optional [ Set ] links : Optional [ Set ]","title":"Document"},{"location":"api/models/directives/#bdantic.models.directives.Event","text":"A model representing a beancount.core.data.Event . Attributes: Name Type Description ty Literal['Event'] A string literal identifying this model. type str A unique string identifying this event. description str The value of the above type at the given date. Source code in bdantic/models/directives.py class Event ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Event`. Attributes: ty: A string literal identifying this model. type: A unique string identifying this event. description: The value of the above type at the given date. \"\"\" _sibling = data . Event ty : Literal [ \"Event\" ] = \"Event\" type : str description : str","title":"Event"},{"location":"api/models/directives/#bdantic.models.directives.Meta","text":"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: Name Type Description filename Optional[str] The name of the file the direcive is located in lineno Optional[int] The line number the directive is located on tolerances Optional[Dict[str, decimal.Decimal]] A lookup dictionary for fetching currency tolerances. Source code in bdantic/models/directives.py class Meta ( BaseModel ): \"\"\"Represents the metadata attached to a directive. Most directives share common metadata fields, namely the filename and line number in which they occur. This model provides access to those common fields but is also configured to accept any other variable number of fields that may be attached to a directive. Attributes: filename: The name of the file the direcive is located in lineno: The line number the directive is located on tolerances: A lookup dictionary for fetching currency tolerances. \"\"\" filename : Optional [ str ] lineno : Optional [ int ] tolerances : Optional [ Dict [ str , Decimal ]] = Field ( alias = \"__tolerances__\" ) class Config : extra = Extra . allow","title":"Meta"},{"location":"api/models/directives/#bdantic.models.directives.Note","text":"A model representing a beancount.core.data.Note . Attributes: Name Type Description ty Literal['Note'] A string literal identifying this model. account str The account this note is attached to. comment str The string contents of the note. Source code in bdantic/models/directives.py class Note ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Note`. Attributes: ty: A string literal identifying this model. account: The account this note is attached to. comment: The string contents of the note. \"\"\" _sibling = data . Note ty : Literal [ \"Note\" ] = \"Note\" account : Account comment : str","title":"Note"},{"location":"api/models/directives/#bdantic.models.directives.Open","text":"A model representing a beancount.core.data.Open . Attributes: Name Type Description ty Literal['Open'] A string literal identifying this model. account str The name of the account being opened. currencies Optional[List[str]] Currencies that are allowed in this account. booking Optional[beancount.core.data.Booking] Booking method used to disambiguate postings to this account. Source code in bdantic/models/directives.py class Open ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Open`. Attributes: ty: A string literal identifying this model. account: The name of the account being opened. currencies: Currencies that are allowed in this account. booking: Booking method used to disambiguate postings to this account. \"\"\" _sibling = data . Open ty : Literal [ \"Open\" ] = \"Open\" account : Account currencies : Optional [ List [ Currency ]] booking : Optional [ data . Booking ]","title":"Open"},{"location":"api/models/directives/#bdantic.models.directives.Pad","text":"A model representing a beancount.core.data.Pad . Attributes: Name Type Description ty Literal['Pad'] A string literal identifying this model. account str The name of the account which needs to be filled. source_account str The name of the account used for debiting. Source code in bdantic/models/directives.py class Pad ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Pad`. Attributes: ty: A string literal identifying this model. account: The name of the account which needs to be filled. source_account: The name of the account used for debiting. \"\"\" _sibling = data . Pad ty : Literal [ \"Pad\" ] = \"Pad\" account : Account source_account : Account","title":"Pad"},{"location":"api/models/directives/#bdantic.models.directives.Posting","text":"A model representing a beancount.core.data.Posting . Attributes: Name Type Description ty Literal['Posting'] A string literal identifying this model. account str The account that is modified by this posting. units Optional[bdantic.models.data.Amount] The units of the position. cost Union[bdantic.models.data.Cost, bdantic.models.data.CostSpec] The cost of the position. price Optional[bdantic.models.data.Amount] The optional price at which the position took place. flag Optional[str] An optional flag to associate with the posting. meta Optional[Dict[str, Any]] Optional metadata attached to the posting. Source code in bdantic/models/directives.py class Posting ( Base ): \"\"\"A model representing a `beancount.core.data.Posting`. Attributes: ty: A string literal identifying this model. account: The account that is modified by this posting. units: The units of the position. cost: The cost of the position. price: The optional price at which the position took place. flag: An optional flag to associate with the posting. meta: Optional metadata attached to the posting. \"\"\" _sibling = data . Posting ty : Literal [ \"Posting\" ] = \"Posting\" account : Account units : Optional [ Amount ] cost : Optional [ Union [ Cost , CostSpec ]] price : Optional [ Amount ] flag : Optional [ str ] meta : Optional [ Dict [ str , Any ]]","title":"Posting"},{"location":"api/models/directives/#bdantic.models.directives.Price","text":"A model representing a beancount.core.data.Price . Attributes: Name Type Description ty Literal['Price'] A string literal identifying this model. currency str The currency that is being priced. amount Amount The value of the currency. Source code in bdantic/models/directives.py class Price ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Price`. Attributes: ty: A string literal identifying this model. currency: The currency that is being priced. amount: The value of the currency. \"\"\" _sibling = data . Price ty : Literal [ \"Price\" ] = \"Price\" currency : Currency amount : Amount","title":"Price"},{"location":"api/models/directives/#bdantic.models.directives.Query","text":"A model representing a beancount.core.data.Query . Attributes: Name Type Description ty Literal['Query'] A string literal identifying this model. name str The unique identifier for the query. query_string str The SQL query string to run or be made available. Source code in bdantic/models/directives.py class Query ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Query`. Attributes: ty: A string literal identifying this model. name: The unique identifier for the query. query_string: The SQL query string to run or be made available. \"\"\" _sibling = data . Query ty : Literal [ \"Query\" ] = \"Query\" name : str query_string : str","title":"Query"},{"location":"api/models/directives/#bdantic.models.directives.Transaction","text":"A model representing a beancount.core.data.Transaction . Attributes: Name Type Description ty Literal['Transaction'] A string literal identifying this model. flag str A flag denoting the state of the transaction. payee Optional[str] The payee of the transaction. narration str A description of the transaction. tags Optional[Set[str]] A set of tag strings. links Optional[Set[str]] A set of link strings. postings List[bdantic.models.directives.Posting] A list of postings attached to this transaction. Source code in bdantic/models/directives.py class Transaction ( BaseDirective ): \"\"\"A model representing a `beancount.core.data.Transaction`. Attributes: ty: A string literal identifying this model. flag: A flag denoting the state of the transaction. payee: The payee of the transaction. narration: A description of the transaction. tags: A set of tag strings. links: A set of link strings. postings: A list of postings attached to this transaction. \"\"\" _sibling = data . Transaction ty : Literal [ \"Transaction\" ] = \"Transaction\" flag : Flag payee : Optional [ str ] narration : str tags : Optional [ Set [ str ]] links : Optional [ Set [ str ]] postings : List [ Posting ]","title":"Transaction"},{"location":"api/models/directives/#bdantic.models.directives.TxnPosting","text":"A model representing a beancount.core.data.TxnPosting . Attributes: Name Type Description ty Literal['TxnPosting'] A string literal identifying this model. txn Transaction The parent transaction instance. posting Posting The posting instance. Source code in bdantic/models/directives.py class TxnPosting ( Base ): \"\"\"A model representing a `beancount.core.data.TxnPosting`. Attributes: ty: A string literal identifying this model. txn: The parent transaction instance. posting: The posting instance. \"\"\" _sibling = data . TxnPosting ty : Literal [ \"TxnPosting\" ] = \"TxnPosting\" txn : Transaction posting : Posting","title":"TxnPosting"},{"location":"api/models/display/","text":"Display Provides models for constructing a DisplayContext. CurrencyContext ( Base ) pydantic-model A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx export ( self ) Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx parse ( obj ) classmethod Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) DisplayContext ( Base ) pydantic-model A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx export ( self ) Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx parse ( obj ) classmethod Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) Distribution ( Base ) pydantic-model A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist export ( self ) Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist parse ( obj ) classmethod Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist )","title":"display"},{"location":"api/models/display/#display","text":"Provides models for constructing a DisplayContext.","title":"Display"},{"location":"api/models/display/#bdantic.models.display.CurrencyContext","text":"A model representing a beancount.core.display_context._CurrencyContext . Attributes: Name Type Description ty Literal['CurrencyContext'] A string literal identifying this model. has_sign bool True if at least one of the numbers has a negative or explicit positive sign. integer_max int The maximum number of digits for the integer part. fractional_dist Distribution A frequency distribution of fractionals seen in the input file. Source code in bdantic/models/display.py class CurrencyContext ( Base ): \"\"\"A model representing a `beancount.core.display_context._CurrencyContext`. Attributes: ty: A string literal identifying this model. has_sign: True if at least one of the numbers has a negative or explicit positive sign. integer_max: The maximum number of digits for the integer part. fractional_dist: A frequency distribution of fractionals seen in the input file. \"\"\" _sibling = display_context . _CurrencyContext ty : Literal [ \"CurrencyContext\" ] = \"CurrencyContext\" has_sign : bool integer_max : int fractional_dist : Distribution @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), ) def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"CurrencyContext"},{"location":"api/models/display/#bdantic.models.display.CurrencyContext.export","text":"Exports this model into a beancount CurrencyContext Returns: Type Description display_context._CurrencyContext A new instance of a beancount CurrencyContext Source code in bdantic/models/display.py def export ( self ) -> display_context . _CurrencyContext : \"\"\"Exports this model into a beancount CurrencyContext Returns: A new instance of a beancount CurrencyContext \"\"\" ctx = display_context . _CurrencyContext () ctx . has_sign = self . has_sign ctx . integer_max = self . integer_max ctx . fractional_dist = self . fractional_dist . export () return ctx","title":"export()"},{"location":"api/models/display/#bdantic.models.display.CurrencyContext.parse","text":"Parses a beancount CurrencyContext into this model Parameters: Name Type Description Default obj display_context._CurrencyContext The Beancount CurrencyContext to parse required Returns: Type Description CurrencyContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . _CurrencyContext ) -> CurrencyContext : \"\"\"Parses a beancount CurrencyContext into this model Args: obj: The Beancount CurrencyContext to parse Returns: A new instance of this model \"\"\" return CurrencyContext ( has_sign = obj . has_sign , integer_max = obj . integer_max , fractional_dist = Distribution . parse ( obj . fractional_dist ), )","title":"parse()"},{"location":"api/models/display/#bdantic.models.display.DisplayContext","text":"A model representing a beancount.core.display_context.DisplayContext . Attributes: Name Type Description ty Literal['DisplayContext'] A string literal identifying this model. ccontexts defaultdict A dict of currency string to CurrencyContext instances. commas bool True if we should render commas. Source code in bdantic/models/display.py class DisplayContext ( Base ): \"\"\"A model representing a `beancount.core.display_context.DisplayContext`. Attributes: ty: A string literal identifying this model. ccontexts: A dict of currency string to CurrencyContext instances. commas: True if we should render commas. \"\"\" _sibling = display_context . DisplayContext ty : Literal [ \"DisplayContext\" ] = \"DisplayContext\" ccontexts : collections . defaultdict commas : bool @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas ) def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"DisplayContext"},{"location":"api/models/display/#bdantic.models.display.DisplayContext.export","text":"Exports this model into a beancount DisplayContext Returns: Type Description display_context.DisplayContext A new instance of a beancount DisplayContext Source code in bdantic/models/display.py def export ( self ) -> display_context . DisplayContext : \"\"\"Exports this model into a beancount DisplayContext Returns: A new instance of a beancount DisplayContext \"\"\" ccontexts = collections . defaultdict ( display_context . _CurrencyContext , { k : v . export () for ( k , v ) in self . ccontexts . items ()}, ) ctx = display_context . DisplayContext () ctx . ccontexts = ccontexts ctx . commas = self . commas return ctx","title":"export()"},{"location":"api/models/display/#bdantic.models.display.DisplayContext.parse","text":"Parses a beancount DisplayContext into this model Parameters: Name Type Description Default obj display_context.DisplayContext The Beancount DisplayContext to parse required Returns: Type Description DisplayContext A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : display_context . DisplayContext ) -> DisplayContext : \"\"\"Parses a beancount DisplayContext into this model Args: obj: The Beancount DisplayContext to parse Returns: A new instance of this model \"\"\" ccontexts = collections . defaultdict ( CurrencyContext , { k : CurrencyContext . parse ( v ) for ( k , v ) in obj . ccontexts . items ()}, ) return DisplayContext ( ccontexts = ccontexts , commas = obj . commas )","title":"parse()"},{"location":"api/models/display/#bdantic.models.display.Distribution","text":"A model representing a beancount.core.distribution.Distribution . Attributes: Name Type Description ty Literal['Distribution'] A string literal identifying this model. hist defaultdict A histogram of integer values. Source code in bdantic/models/display.py class Distribution ( Base ): \"\"\"A model representing a `beancount.core.distribution.Distribution`. Attributes: ty: A string literal identifying this model. hist: A histogram of integer values. \"\"\" _sibling = distribution . Distribution ty : Literal [ \"Distribution\" ] = \"Distribution\" hist : collections . defaultdict @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist ) def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"Distribution"},{"location":"api/models/display/#bdantic.models.display.Distribution.export","text":"Exports this model into a beancount Distribution Returns: Type Description distribution.Distribution A new instance of a beancount Distribution Source code in bdantic/models/display.py def export ( self ) -> distribution . Distribution : \"\"\"Exports this model into a beancount Distribution Returns: A new instance of a beancount Distribution \"\"\" dist = distribution . Distribution () dist . hist = self . hist return dist","title":"export()"},{"location":"api/models/display/#bdantic.models.display.Distribution.parse","text":"Parses a beancount Distribution into this model Parameters: Name Type Description Default obj distribution.Distribution The Beancount Distribution to parse required Returns: Type Description Distribution A new instance of this model Source code in bdantic/models/display.py @classmethod def parse ( cls , obj : distribution . Distribution ) -> Distribution : \"\"\"Parses a beancount Distribution into this model Args: obj: The Beancount Distribution to parse Returns: A new instance of this model \"\"\" return Distribution ( hist = obj . hist )","title":"parse()"},{"location":"api/models/file/","text":"File Provides models for representing the contents of a parsed beancount file. BeancountFile ( Base ) pydantic-model A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) export ( self ) Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ()) parse ( obj ) classmethod Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) Directives ( BaseList ) pydantic-model A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs export ( self ) Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs parse ( obj ) classmethod Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) Options ( BaseDict ) pydantic-model A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d export ( self ) Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d parse ( obj ) classmethod Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d )","title":"file"},{"location":"api/models/file/#file","text":"Provides models for representing the contents of a parsed beancount file.","title":"File"},{"location":"api/models/file/#bdantic.models.file.BeancountFile","text":"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: Name Type Description entries Directives The directives parsed from the beancount file. options Options The options parsed from the beancount file. errors List[Any] Any errors generated during parsing. Source code in bdantic/models/file.py class BeancountFile ( Base ): \"\"\"A model representing the contents of an entire beancount file. This model provides an interface for accessing the result returned when loading the contents of a beancount file. It's constructor can be fed the (entries, errors, options) tuple often returned from loader functions. Attributes: entries: The directives parsed from the beancount file. options: The options parsed from the beancount file. errors: Any errors generated during parsing. \"\"\" entries : Directives options : Options errors : List [ Any ] @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], ) def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"BeancountFile"},{"location":"api/models/file/#bdantic.models.file.BeancountFile.export","text":"Exports this model into it's original counterpart Returns: Type Description Tuple[List[data.Directive], List[Any], Dict[str, Any]] The entries, errors, and options from the original loader Source code in bdantic/models/file.py def export ( self ) -> Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]]: \"\"\"Exports this model into it's original counterpart Returns: The entries, errors, and options from the original loader \"\"\" return ( self . entries . export (), self . errors , self . options . export ())","title":"export()"},{"location":"api/models/file/#bdantic.models.file.BeancountFile.parse","text":"Parses the results of loading a beancount file into this model. Parameters: Name Type Description Default obj Tuple[List[data.Directive], List[Any], Dict[str, Any]] The results from calling the beancount loader required Returns: Type Description BeancountFile A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Tuple [ List [ data . Directive ], List [ Any ], Dict [ str , Any ]], ) -> BeancountFile : \"\"\"Parses the results of loading a beancount file into this model. Args: obj: The results from calling the beancount loader Returns: A new instance of this model \"\"\" return BeancountFile ( entries = Directives . parse ( obj [ 0 ]), options = Options . parse ( obj [ 2 ]), errors = obj [ 1 ], )","title":"parse()"},{"location":"api/models/file/#bdantic.models.file.Directives","text":"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. Source code in bdantic/models/file.py class Directives ( BaseList , smart_union = True ): \"\"\"A model representing a list of directives. This models wraps the entries response often returned when loading the content of a beancount file. It holds a list of various valid directive models. \"\"\" __root__ : List [ ModelDirective ] @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs ) def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"Directives"},{"location":"api/models/file/#bdantic.models.file.Directives.export","text":"Exports this model into a list of beancount directives Returns: Type Description List[data.Directive] The list of beancount directives Source code in bdantic/models/file.py def export ( self ) -> List [ data . Directive ]: \"\"\"Exports this model into a list of beancount directives Returns: The list of beancount directives \"\"\" dirs = [ d . export () for d in self . __root__ ] return dirs","title":"export()"},{"location":"api/models/file/#bdantic.models.file.Directives.parse","text":"Parses a list of beancount directives into this model Parameters: Name Type Description Default obj List[data.Directive] The Beancount directives to parse required Returns: Type Description Directives A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : List [ data . Directive ]) -> Directives : \"\"\"Parses a list of beancount directives into this model Args: obj: The Beancount directives to parse Returns: A new instance of this model \"\"\" dirs = [] dirs = [ type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore return Directives ( __root__ = dirs )","title":"parse()"},{"location":"api/models/file/#bdantic.models.file.Options","text":"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. Source code in bdantic/models/file.py class Options ( BaseDict , smart_union = True ): \"\"\"A model representing a dictionary of options. This model wraps the options often returned when loading the content of a beancount file. Options which contain raw beancount types are automatically parsed into their respective model. \"\"\" __root__ : Dict [ str , OptionValues ] @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d ) def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"Options"},{"location":"api/models/file/#bdantic.models.file.Options.export","text":"Exports this model into a dictionary of beancount options Returns: Type Description Dict[str, Any] The dictionary of beancount options Source code in bdantic/models/file.py def export ( self ) -> Dict [ str , Any ]: \"\"\"Exports this model into a dictionary of beancount options Returns: The dictionary of beancount options \"\"\" d = {} for key , value in self . __root__ . items (): if type ( value ) in type_map . values (): d [ key ] = value . export () # type: ignore else : d [ key ] = value return d","title":"export()"},{"location":"api/models/file/#bdantic.models.file.Options.parse","text":"Parses a dictionary of beancount options into this model Parameters: Name Type Description Default obj Dict[str, Any] The Beancount options to parse required Returns: Type Description Options A new instance of this model Source code in bdantic/models/file.py @classmethod def parse ( cls , obj : Dict [ str , Any ]) -> Options : \"\"\"Parses a dictionary of beancount options into this model Args: obj: The Beancount options to parse Returns: A new instance of this model \"\"\" d = {} for key , value in obj . items (): if type ( value ) in type_map . keys (): d [ key ] = type_map [ type ( value )] . parse ( value ) else : d [ key ] = value return Options ( __root__ = d )","title":"parse()"},{"location":"api/models/query/","text":"Query Provides models for representing the results of running a query. QueryColumn ( BaseModel ) pydantic-model A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str QueryResult ( Base ) pydantic-model A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) export ( self ) Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows ) parse ( obj ) classmethod Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows )","title":"query"},{"location":"api/models/query/#query","text":"Provides models for representing the results of running a query.","title":"Query"},{"location":"api/models/query/#bdantic.models.query.QueryColumn","text":"A model representing a single column from a query response. Attributes: Name Type Description name str The name of the column. type str The type of the column. Source code in bdantic/models/query.py class QueryColumn ( BaseModel ): \"\"\"A model representing a single column from a query response. Attributes: name: The name of the column. type: The type of the column. \"\"\" name : str type : str","title":"QueryColumn"},{"location":"api/models/query/#bdantic.models.query.QueryResult","text":"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the beancount.query.query.run_query function. The result is a tuple of columns and rows which this model represents in the columns and rows fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: Name Type Description columns List[bdantic.models.query.QueryColumn] The columns denoting the name and types of the resulting data. rows List[Dict[str, Any]] The data rows returned from the query. Source code in bdantic/models/query.py class QueryResult ( Base ): \"\"\"A model representing the result from a beancount query. The constructor of this model accepts the value returned from executing a beancount query using the `beancount.query.query.run_query` function. The result is a tuple of columns and rows which this model represents in the `columns` and `rows` fields accordingly. Like all models, any data types which can be parsed from the result into models are automatically parsed. Attributes: columns: The columns denoting the name and types of the resulting data. rows: The data rows returned from the query. \"\"\" ty : Literal [ \"QueryResult\" ] = \"QueryResult\" columns : List [ QueryColumn ] rows : List [ QueryRow ] @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows ) def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"QueryResult"},{"location":"api/models/query/#bdantic.models.query.QueryResult.export","text":"Exports this model into a beancount query result Returns: Type Description Tuple[List[Tuple[str, Type]], List[Any]] A new instance of a beancount query result Source code in bdantic/models/query.py def export ( self ) -> Tuple [ List [ Tuple [ str , Type ]], List [ Any ]]: \"\"\"Exports this model into a beancount query result Returns: A new instance of a beancount query result \"\"\" column_names = [ v . name for v in self . columns ] ResultRow = collections . namedtuple ( # type: ignore \"ResultRow\" , column_names , ) columns : List [ Tuple [ str , Type ]] = [] for column in self . columns : columns . append (( column . name , _map [ column . type ])) rows : List [ ResultRow ] = [] for row in self . rows : values = [] for key in column_names : if type ( row [ key ]) in type_map . values (): values . append ( row [ key ] . export ()) else : values . append ( row [ key ]) rows . append ( ResultRow . _make ( values )) return ( columns , rows )","title":"export()"},{"location":"api/models/query/#bdantic.models.query.QueryResult.parse","text":"Parses a beancount query result into this model Parameters: Name Type Description Default obj Tuple[List[Tuple[str, Type]], List[Any]] The Beancount query result required Returns: Type Description QueryResult A new instance of this model Source code in bdantic/models/query.py @classmethod def parse ( cls , obj : Tuple [ List [ Tuple [ str , Type ]], List [ Any ]] ) -> QueryResult : \"\"\"Parses a beancount query result into this model Args: obj: The Beancount query result Returns: A new instance of this model \"\"\" columns : List [ QueryColumn ] = [] for column in obj [ 0 ]: columns . append ( QueryColumn ( name = column [ 0 ], type = column [ 1 ] . __name__ ) ) rows : List [ QueryRow ] = [] for row in obj [ 1 ]: d = row . _asdict () for k , v in d . items (): if type ( v ) in type_map . keys (): d [ k ] = type_map [ type ( v )] . parse ( v ) rows . append ( d ) return QueryResult ( columns = columns , rows = rows )","title":"parse()"},{"location":"api/models/realize/","text":"Realize Provides models for representing the results of running a realization. Account ( BaseModel ) pydantic-model A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError from_real ( ra ) staticmethod Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) parse ( obj ) staticmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) RealAccount ( Base ) pydantic-model A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) export ( self ) Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra parse ( obj ) classmethod Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) to_account ( self ) Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self ) TxnPostings ( BaseList ) pydantic-model A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] export ( self ) Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ] parse ( obj ) classmethod Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"realize"},{"location":"api/models/realize/#realize","text":"Provides models for representing the results of running a realization.","title":"Realize"},{"location":"api/models/realize/#bdantic.models.realize.Account","text":"A simplified view of an entire beancount account. The primary differenece between this and a RealAccount is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: Name Type Description balance Dict[str, bdantic.models.data.Inventory] A mapping of currencies to inventories. close Optional[datetime.date] The (optional) date the account was closed. directives TxnPostings All directives associated with this account. name str The account name. open date The date the account was opened. Source code in bdantic/models/realize.py class Account ( BaseModel ): \"\"\"A simplified view of an entire beancount account. The primary differenece between this and a `RealAccount` is that it strips out all children and provides some other useful data points like when the account was opened or closed. Removing the children greatly reduces the size of this model, especially when being rendered in something like JSON. Attributes: balance: A mapping of currencies to inventories. close: The (optional) date the account was closed. directives: All directives associated with this account. name: The account name. open: The date the account was opened. \"\"\" balance : Dict [ str , Inventory ] close : Optional [ date ] directives : TxnPostings name : str open : date @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , ) @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , ) def export ( self ): raise NotImplementedError","title":"Account"},{"location":"api/models/realize/#bdantic.models.realize.Account.from_real","text":"Creates a new instance of Account using details from a RealAccount . Parameters: Name Type Description Default ra RealAccount The RealAccount to use required Returns: Type Description Account A new instance of Account Source code in bdantic/models/realize.py @staticmethod def from_real ( ra : RealAccount ) -> Account : \"\"\"Creates a new instance of `Account` using details from a [RealAccount][bdantic.models.realize.RealAccount]. Args: ra: The RealAccount to use Returns: A new instance of Account \"\"\" open = ra . txn_postings . filter ( \"[?ty == `Open`]\" ) assert open is not None assert len ( open ) == 1 close = ra . txn_postings . filter ( \"[?ty == `Close`]\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None return Account ( balance = ra . cur_map , close = close_date , directives = ra . txn_postings , open = open [ 0 ] . date , name = ra . account , )","title":"from_real()"},{"location":"api/models/realize/#bdantic.models.realize.Account.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description Account A new instance of this model Source code in bdantic/models/realize.py @staticmethod def parse ( obj : realization . RealAccount ) -> Account : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" txn_postings = TxnPostings . parse ( obj . txn_postings ) # type: ignore open = txn_postings . filter ( \"[?ty == 'Open']\" ) assert open is not None assert len ( open ) == 1 close = txn_postings . filter ( \"[?ty == 'Close']\" ) if close : assert len ( close ) < 2 close_date = close [ 0 ] . date else : close_date = None split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return Account ( balance = map , close = close_date , directives = txn_postings , open = open [ 0 ] . date , name = obj . account , )","title":"parse()"},{"location":"api/models/realize/#bdantic.models.realize.RealAccount","text":"A model representing a beancount.core.realize.RealAccount . A RealAccount is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a RealAccount is moved to the dedicated children field. Attributes: Name Type Description ty Literal['RealAccount'] A string literal identifying this model. account str The account name. balance Inventory The balance of the account children Dict[str, bdantic.models.realize.RealAccount] All children that belong to this account. cur_map Dict[str, bdantic.models.data.Inventory] A map of currencies to their respective balances. txn_postings TxnPostings A list of directives in which this account appears. Source code in bdantic/models/realize.py class RealAccount ( Base , smart_union = True ): \"\"\"A model representing a `beancount.core.realize.RealAccount`. A `RealAccount` is represented as a dictionary in beancount which contains additional attributes for describing details about the account. This model matches those details, however, the dictinary representation of a `RealAccount` is moved to the dedicated `children` field. Attributes: ty: A string literal identifying this model. account: The account name. balance: The balance of the account children: All children that belong to this account. cur_map: A map of currencies to their respective balances. txn_postings: A list of directives in which this account appears. \"\"\" ty : Literal [ \"RealAccount\" ] = \"RealAccount\" account : AccountName balance : Inventory children : Dict [ str , RealAccount ] cur_map : Dict [ str , Inventory ] txn_postings : TxnPostings @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore ) def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"RealAccount"},{"location":"api/models/realize/#bdantic.models.realize.RealAccount.export","text":"Exports this model into a beancount RealAccount Returns: Type Description realization.RealAccount A new instance of a beancount RealAccount Source code in bdantic/models/realize.py def export ( self ) -> realization . RealAccount : \"\"\"Exports this model into a beancount RealAccount Returns: A new instance of a beancount RealAccount \"\"\" ra = realization . RealAccount ( self . account ) for k , v in self . children . items (): ra [ k ] = v . export () ra . txn_postings = self . txn_postings . export () # type: ignore ra . balance = self . balance . export () return ra","title":"export()"},{"location":"api/models/realize/#bdantic.models.realize.RealAccount.parse","text":"Parses a beancount RealAccount into this model Parameters: Name Type Description Default obj realization.RealAccount The Beancount RealAccount required Returns: Type Description RealAccount A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : realization . RealAccount ) -> RealAccount : \"\"\"Parses a beancount RealAccount into this model Args: obj: The Beancount RealAccount Returns: A new instance of this model \"\"\" children = {} for k , v in obj . items (): children [ k ] = RealAccount . parse ( v ) split = obj . balance . split () map = {} for k , v in split . items (): map [ k ] = Inventory . parse ( v ) return RealAccount ( account = obj . account , balance = Inventory . parse ( obj . balance ), children = children , cur_map = map , txn_postings = TxnPostings . parse ( obj . txn_postings ), # type: ignore )","title":"parse()"},{"location":"api/models/realize/#bdantic.models.realize.RealAccount.to_account","text":"Converts this RealAccount into an Account instance. Returns: Type Description Account A new Account instance Source code in bdantic/models/realize.py def to_account ( self ) -> Account : \"\"\"Converts this RealAccount into an Account instance. Returns: A new Account instance \"\"\" return Account . from_real ( self )","title":"to_account()"},{"location":"api/models/realize/#bdantic.models.realize.TxnPostings","text":"A model representing the txnpostings found within RealAccount's. Source code in bdantic/models/realize.py class TxnPostings ( BaseList ): \"\"\"A model representing the txnpostings found within RealAccount's.\"\"\" __root__ : List [ ModelTxnPosting ] @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore ) def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"TxnPostings"},{"location":"api/models/realize/#bdantic.models.realize.TxnPostings.export","text":"Exports this model into it's associated beancount type Returns: Type Description List[BeanTxnPosting] A new instance of the beancount type Source code in bdantic/models/realize.py def export ( self ) -> List [ BeanTxnPosting ]: return [ d . export () for d in self . __root__ ]","title":"export()"},{"location":"api/models/realize/#bdantic.models.realize.TxnPostings.parse","text":"Parses a beancount type into this model Parameters: Name Type Description Default obj List[BeanTxnPosting] The Beancount type to parse required Returns: Type Description TxnPostings A new instance of this model Source code in bdantic/models/realize.py @classmethod def parse ( cls , obj : List [ BeanTxnPosting ], ) -> TxnPostings : return TxnPostings ( __root__ = [ _type_map [ type ( d )] . parse ( d ) for d in obj ] # type: ignore )","title":"parse()"}]}